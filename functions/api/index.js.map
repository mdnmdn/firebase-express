{"version":3,"sources":["../../src/api/index.js"],"names":["db","require","admin","database","exports","checkInitSurvey","instance","console","log","data","ref","once","val","orginalData","set","list","search","active","first","count","effectiveInstance","addr","result","lowerSearch","toLowerCase","surveyList","Object","keys","map","id","k","name","description","numberOfQuestions","questions","length","filter","survey","indexOf","undefined","slice","parseInt","get","surveyId","answers","answerList","answer"],"mappings":"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","file":"index.js","sourcesContent":["const db = require('../firebase').admin.database();\n\n//console.log(db);\n\nexports.checkInitSurvey = async (instance = 'default') => {\n    console.log('checkInitSurvey for ' + instance);\n    const data = await db.ref(`/data/${instance}/surveys`).once('value');\n    console.log('   => data',  data.val());\n    if (!data.val()){\n        console.log(`creating repo ${instance}`);\n        const orginalData = await db.ref(`/data/__template`).once('value');\n        await db.ref(`/data/${instance}`).set(orginalData.val());\n    }\n};\n\nexports.list = async ({\n    instance, search, active, first = 0, count = 10\n    }) => {\n        const effectiveInstance = instance || 'default';\n        await exports.checkInitSurvey(effectiveInstance);\n        console.log('list', {instance, search, active, effectiveInstance, first, count})\n        const addr = `/data/${effectiveInstance}/surveys`;\n        const ref = db.ref(addr);\n        //return new Promise(r => ref.once('value', val => f(val)));\n        const result = await ref.once('value');\n        const data = result.val();\n        const lowerSearch = search ? search.toLowerCase() : null;\n        let surveyList = Object.keys(data)\n                    .map(k => {\n                        \n                        return {\n                        id: data[k].id,\n                        active: data[k].active,\n                        name: data[k].name,\n                        description: data[k].description,\n                        numberOfQuestions: Object.keys(data[k].questions).length,\n                        questions: data[k].questions,\n                    }})\n                    .filter(survey => \n                         !search || \n                        (\n                            // eslint-disable-next-line eqeqeq\n                            survey.id == search ||\n                            `${survey.description}|${survey.name}`.toLowerCase()\n                                .indexOf(lowerSearch) >= 0 \n                        ))\n                    .filter(survey =>\n                        active === undefined || \n                        active === '' ||\n                        // eslint-disable-next-line eqeqeq\n                        active == survey.active);\n                    // pagination\n        console.log('slice', first, count, first + count);\n        console.log('length1', surveyList.length);\n        surveyList = surveyList.slice(first, parseInt(first) + parseInt(count));\n        console.log('length2', surveyList.length);\n        return surveyList;\n};\n\n\nexports.get = async ({\n    instance, surveyId\n    }) => {\n        const effectiveInstance = instance || 'default';\n        await exports.checkInitSurvey(effectiveInstance);\n        console.log('get', {instance, surveyId})\n        const addr = `/data/${effectiveInstance}/surveys/${surveyId}`;\n        const ref = db.ref(addr);\n        const result = await ref.once('value');\n        const data = result.val();\n        return data;\n};\n\n\nexports.answers = async ({\n    instance, surveyId, search, first = 0, count = 10\n    }) => {\n        const effectiveInstance = instance || 'default';\n        await exports.checkInitSurvey(effectiveInstance);\n        console.log('answers', {instance, surveyId,search, effectiveInstance, first, count})\n        const addr = `/data/${effectiveInstance}/answers/${surveyId}`;\n        const ref = db.ref(addr);\n        //return new Promise(r => ref.once('value', val => f(val)));\n        const result = await ref.once('value');\n        const data = result.val();\n        const lowerSearch = search ? search.toLowerCase() : null;\n        let answerList = Object.keys(data)\n                    .map(id => ({id, ...data[id]}))\n                    .filter(answer => \n                         !search || \n                        (\n                            // eslint-disable-next-line eqeqeq\n                            answer.id == search ||\n                            answer.name.toLowerCase()\n                                .indexOf(lowerSearch) >= 0 \n                        ))\n                    // pagination\n                    .slice(first, parseInt(first) + parseInt(count));\n\n        return answerList;\n};"]}