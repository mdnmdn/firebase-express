{"version":3,"sources":["../../src/api/index.js"],"names":["db","require","admin","database","exports","checkInitSurvey","instance","data","ref","once","console","log","orginalData","set","list","search","active","addr","result","val","lowerSearch","toLowerCase","Object","keys","map","id","k","name","description","questions","length","filter","survey","indexOf","undefined"],"mappings":";;;;AAAA,MAAMA,KAAKC,QAAQ,aAAR,EAAuBC,KAAvB,CAA6BC,QAA7B,EAAX;;AAEA;;AAEAC,QAAQC,eAAR;AAAA,iCAA0B,WAAOC,WAAW,SAAlB,EAAgC;AACtD,cAAMC,OAAO,MAAMP,GAAGQ,GAAH,CAAQ,SAAQF,QAAS,UAAzB,EAAoCG,IAApC,CAAyC,OAAzC,CAAnB;AACA,YAAI,CAACF,IAAL,EAAU;AACNG,oBAAQC,GAAR,CAAa,iBAAgBL,QAAS,EAAtC;AACA,kBAAMM,cAAc,MAAMZ,GAAGQ,GAAH,CAAQ,kBAAR,EAA2BC,IAA3B,CAAgC,OAAhC,CAA1B;AACA,kBAAMT,GAAGQ,GAAH,CAAQ,SAAQF,QAAS,EAAzB,EAA4BO,GAA5B,CAAgCD,WAAhC,CAAN;AACH;AACJ,KAPD;;AAAA;AAAA;AAAA;AAAA;;AASAR,QAAQU,IAAR;AAAA,kCAAe,WAAO;AAClBR,gBADkB,EACRS,MADQ,EACAC;AADA,KAAP,EAEL;AACF,cAAMC,OAAQ,SAAQX,QAAS,UAA/B;AACA,cAAME,MAAMR,GAAGQ,GAAH,CAAOS,IAAP,CAAZ;AACA;AACA,cAAMC,SAAS,MAAMV,IAAIC,IAAJ,CAAS,OAAT,CAArB;AACA,cAAMF,OAAOW,OAAOC,GAAP,EAAb;AACA,cAAMC,cAAcL,SAASA,OAAOM,WAAP,EAAT,GAAgC,IAApD;AACA,eAAOC,OAAOC,IAAP,CAAYhB,IAAZ,EACMiB,GADN,CACU,aAAK;;AAEN,mBAAO;AACPC,oBAAIlB,KAAKmB,CAAL,EAAQD,EADL;AAEPT,wBAAQT,KAAKmB,CAAL,EAAQV,MAFT;AAGPW,sBAAMpB,KAAKmB,CAAL,EAAQC,IAHP;AAIPC,6BAAarB,KAAKmB,CAAL,EAAQE,WAJd;AAKPC,2BAAWP,OAAOC,IAAP,CAAYhB,KAAKmB,CAAL,EAAQG,SAApB,EAA+BC;AALnC,aAAP;AAMF,SATP,EAUMC,MAVN,CAUa;AAAA,mBACH,CAAChB,MAAD;AAEG;AACAiB,mBAAOP,EAAP,IAAaV,MAAb,IACC,GAAEiB,OAAOJ,WAAY,IAAGI,OAAOL,IAAK,EAArC,CAAuCN,WAAvC,GACKY,OADL,CACab,WADb,KAC6B,CAN7B;AAAA,SAVb,EAkBMW,MAlBN,CAkBa;AAAA,mBACJf,WAAWkB,SAAX,IACAlB,WAAW,EADX;AAEA;AACAA,sBAAUgB,OAAOhB,MAJb;AAAA,SAlBb,CAAP;AAuBP,KAhCD;;AAAA;AAAA;AAAA;AAAA","file":"index.js","sourcesContent":["const db = require('../firebase').admin.database();\n\n//console.log(db);\n\nexports.checkInitSurvey = async (instance = 'default') => {\n    const data = await db.ref(`/data/${instance}/surveys`).once('value');\n    if (!data){\n        console.log(`creating repo ${instance}`);\n        const orginalData = await db.ref(`/data/__template`).once('value');\n        await db.ref(`/data/${instance}`).set(orginalData)\n    }\n};\n\nexports.list = async ({\n    instance, search, active\n    }) => {\n        const addr = `/data/${instance}/surveys`;\n        const ref = db.ref(addr);\n        //return new Promise(r => ref.once('value', val => f(val)));\n        const result = await ref.once('value');\n        const data = result.val();\n        const lowerSearch = search ? search.toLowerCase() : null;\n        return Object.keys(data)\n                    .map(k => {\n                        \n                        return {\n                        id: data[k].id,\n                        active: data[k].active,\n                        name: data[k].name,\n                        description: data[k].description,\n                        questions: Object.keys(data[k].questions).length,\n                    }})\n                    .filter(survey => \n                         !search || \n                        (\n                            // eslint-disable-next-line eqeqeq\n                            survey.id == search ||\n                            `${survey.description}|${survey.name}`.toLowerCase()\n                                .indexOf(lowerSearch) >= 0 \n                        ))\n                    .filter(survey =>\n                        active === undefined || \n                        active === '' ||\n                        // eslint-disable-next-line eqeqeq\n                        active == survey.active);\n};\n\n\n"]}